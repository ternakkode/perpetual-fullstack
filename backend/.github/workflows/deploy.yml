name: Deploy to AWS ECS

on:
  push:
    branches: [main, production]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod
          - staging

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: brother-terminal

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'prod' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ env.PROJECT_NAME }}-${{ github.event.inputs.environment || 'prod' }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build and push image
        docker buildx build \
          --platform linux/amd64 \
          --push \
          --tag $REGISTRY/$REPOSITORY:$IMAGE_TAG \
          --tag $REGISTRY/$REPOSITORY:latest \
          .

    - name: Update ECS service
      env:
        ENVIRONMENT: ${{ github.event.inputs.environment || 'prod' }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Get current task definition
        CLUSTER_NAME="${PROJECT_NAME}-${ENVIRONMENT}"
        SERVICE_NAME="${PROJECT_NAME}-${ENVIRONMENT}"
        ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
        ECR_REPOSITORY="${ECR_REGISTRY}/${PROJECT_NAME}-${ENVIRONMENT}"
        
        # Get current task definition
        CURRENT_TASK_DEF=$(aws ecs describe-task-definition \
          --task-definition "$SERVICE_NAME" \
          --query 'taskDefinition' \
          --output json)
        
        # Update image in task definition
        NEW_TASK_DEF=$(echo "$CURRENT_TASK_DEF" | jq --arg IMAGE "${ECR_REPOSITORY}:${IMAGE_TAG}" '
          .containerDefinitions[0].image = $IMAGE |
          del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)
        ')
        
        # Register new task definition
        NEW_TASK_DEF_ARN=$(echo "$NEW_TASK_DEF" | aws ecs register-task-definition \
          --cli-input-json file:///dev/stdin \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        
        # Update service
        aws ecs update-service \
          --cluster "$CLUSTER_NAME" \
          --service "$SERVICE_NAME" \
          --task-definition "$NEW_TASK_DEF_ARN"
        
        # Wait for deployment to complete
        echo "Waiting for deployment to complete..."
        aws ecs wait services-stable \
          --cluster "$CLUSTER_NAME" \
          --services "$SERVICE_NAME"
        
        echo "Deployment completed successfully!"

    - name: Verify deployment
      env:
        ENVIRONMENT: ${{ github.event.inputs.environment || 'prod' }}
      run: |
        # Get load balancer DNS name
        ALB_NAME="${PROJECT_NAME}-${ENVIRONMENT}-alb"
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --names "$ALB_NAME" \
          --query 'LoadBalancers[0].DNSName' \
          --output text)
        
        if [ "$ALB_DNS" != "None" ]; then
          echo "Application URL: http://$ALB_DNS"
          echo "Health check URL: http://$ALB_DNS/health"
          
          # Wait a moment for the service to be ready
          sleep 30
          
          # Basic health check
          if curl -f -s "http://$ALB_DNS/health" > /dev/null; then
            echo "✅ Health check passed"
          else
            echo "⚠️  Health check failed - service may still be starting"
          fi
        else
          echo "Could not retrieve load balancer DNS"
        fi

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🚀 Deployment to ${{ github.event.inputs.environment || 'prod' }} completed successfully!"
        else
          echo "❌ Deployment to ${{ github.event.inputs.environment || 'prod' }} failed!"
        fi